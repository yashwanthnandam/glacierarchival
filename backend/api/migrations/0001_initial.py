# Generated by Django 5.2.7 on 2025-10-15 09:22

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('verified', models.BooleanField(db_index=True, default=False)),
                ('expires_at', models.DateTimeField(help_text='Token expiration time')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='email_verification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Verification',
                'verbose_name_plural': 'Email Verifications',
            },
        ),
        migrations.CreateModel(
            name='HibernationPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Plan name (e.g., deep_freeze, smart_hibernate)', max_length=100)),
                ('storage_tier', models.CharField(help_text='Storage tier (100gb, 500gb, 1tb)', max_length=20)),
                ('aws_storage_type', models.CharField(default='deep_archive', help_text='AWS storage type', max_length=50)),
                ('restore_time_hours', models.IntegerField(default=12, help_text='Restore time in hours')),
                ('user_cost_inr', models.DecimalField(decimal_places=2, default=0.0, help_text='User cost in INR', max_digits=10)),
                ('annual_price_inr', models.DecimalField(decimal_places=2, default=0.0, help_text='Annual price in INR', max_digits=10)),
                ('margin_inr', models.DecimalField(decimal_places=2, default=0.0, help_text='Margin in INR', max_digits=10)),
                ('free_retrieval_gb', models.IntegerField(default=10, help_text='Free retrieval in GB')),
                ('retrieval_period_months', models.IntegerField(default=6, help_text='Retrieval period in months')),
                ('user_message', models.TextField(default='', help_text='User message')),
                ('description', models.TextField(default='', help_text='Plan description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this plan is available for subscription')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('monthly_price_inr', models.DecimalField(decimal_places=2, default=0.0, help_text='Monthly price in INR', max_digits=10)),
                ('storage_limit_gb', models.IntegerField(default=100, help_text='Storage limit in GB')),
                ('aws_storage_class', models.CharField(default='DEEP_ARCHIVE', help_text='AWS storage class (DEEP_ARCHIVE, GLACIER, STANDARD)', max_length=50)),
                ('retrieval_policy', models.TextField(default='', help_text='Retrieval policy description')),
            ],
            options={
                'verbose_name': 'Hibernation Plan',
                'verbose_name_plural': 'Hibernation Plans',
                'unique_together': {('name', 'storage_tier')},
            },
        ),
        migrations.CreateModel(
            name='MediaFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(db_index=True, max_length=255)),
                ('original_filename', models.CharField(max_length=255)),
                ('file_size', models.BigIntegerField(help_text='File size in bytes')),
                ('file_type', models.CharField(db_index=True, max_length=100)),
                ('s3_key', models.CharField(blank=True, db_index=True, max_length=500, null=True)),
                ('status', models.CharField(choices=[('uploaded', 'Uploaded'), ('archiving', 'Archiving'), ('archived', 'Archived'), ('restoring', 'Restoring'), ('restored', 'Restored'), ('failed', 'Failed')], db_index=True, default='uploaded', max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('checksum', models.CharField(blank=True, help_text='File checksum for integrity', max_length=64, null=True)),
                ('glacier_archive_id', models.CharField(blank=True, help_text='Glacier archive ID', max_length=255, null=True)),
                ('restore_tier', models.CharField(choices=[('Expedited', 'Expedited (1-5 min)'), ('Standard', 'Standard (3-5 hours)'), ('Bulk', 'Bulk (5-12 hours)')], default='Standard', help_text='Glacier restore tier', max_length=20)),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='When the file was soft deleted', null=True)),
                ('relative_path', models.CharField(blank=True, db_index=True, help_text='Relative path of the file within the folder structure', max_length=1000, null=True)),
                ('encryption_metadata', models.JSONField(blank=True, help_text='Encryption metadata including algorithm, IV, key info', null=True)),
                ('is_encrypted', models.BooleanField(default=False, help_text='Whether the file is encrypted')),
                ('storage_cost', models.DecimalField(blank=True, decimal_places=4, help_text='Storage cost in USD', max_digits=10, null=True)),
                ('last_accessed', models.DateTimeField(blank=True, help_text='Last time the file was accessed', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Media File',
                'verbose_name_plural': 'Media Files',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ArchiveJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_type', models.CharField(choices=[('archive', 'Archive'), ('restore', 'Restore')], db_index=True, max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], db_index=True, default='pending', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('progress', models.IntegerField(default=0, help_text='Progress percentage')),
                ('retry_count', models.IntegerField(default=0, help_text='Number of retry attempts')),
                ('glacier_job_id', models.CharField(blank=True, help_text='Glacier job ID for restore operations', max_length=255, null=True)),
                ('estimated_completion', models.DateTimeField(blank=True, help_text='Estimated completion time for restore', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='archive_jobs', to=settings.AUTH_USER_MODEL)),
                ('media_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='api.mediafile')),
            ],
            options={
                'verbose_name': 'Archive Job',
                'verbose_name_plural': 'Archive Jobs',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('used', models.BooleanField(db_index=True, default=False)),
                ('expires_at', models.DateTimeField(help_text='Token expiration time')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Password Reset Token',
                'verbose_name_plural': 'Password Reset Tokens',
            },
        ),
        migrations.CreateModel(
            name='S3Config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bucket_name', models.CharField(db_index=True, max_length=255)),
                ('aws_access_key', models.CharField(max_length=255)),
                ('aws_secret_key_encrypted', models.TextField(blank=True, null=True)),
                ('region', models.CharField(default='us-east-1', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='s3_config', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'S3 Configuration',
                'verbose_name_plural': 'S3 Configurations',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('upload', 'Upload'), ('download', 'Download'), ('delete', 'Delete'), ('restore', 'Restore'), ('archive', 'Archive')], db_index=True, max_length=20)),
                ('file_size_bytes', models.BigIntegerField(default=0, help_text='File size in bytes')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='User IP address', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string', null=True)),
                ('month', models.DateField(db_index=True, help_text='Month for tracking (first day of month)')),
                ('daily_uploads', models.IntegerField(default=0, help_text='Daily upload count')),
                ('daily_downloads', models.IntegerField(default=0, help_text='Daily download count')),
                ('daily_storage_changes', models.BigIntegerField(default=0, help_text='Daily storage changes in bytes')),
                ('file_id', models.IntegerField(blank=True, help_text='MediaFile ID if applicable', null=True)),
                ('success', models.BooleanField(default=True, help_text='Whether the activity was successful')),
                ('error_message', models.TextField(blank=True, help_text='Error message if failed', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Activity',
                'verbose_name_plural': 'User Activities',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserHibernationPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this subscription is active')),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Subscription expiration date')),
                ('storage_used_bytes', models.BigIntegerField(default=0, help_text='Storage used in bytes')),
                ('retrieval_used_gb', models.DecimalField(decimal_places=2, default=0.0, help_text='Retrieval used in GB', max_digits=10)),
                ('retrieval_period_start', models.DateTimeField(default=django.utils.timezone.now, help_text='Start of retrieval period')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_subscriptions', to='api.hibernationplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hibernation_plans', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Hibernation Plan',
                'verbose_name_plural': 'User Hibernation Plans',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('razorpay_order_id', models.CharField(db_index=True, max_length=255, unique=True)),
                ('razorpay_payment_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('razorpay_signature', models.CharField(blank=True, max_length=255, null=True)),
                ('amount_inr', models.DecimalField(decimal_places=2, help_text='Amount in INR', max_digits=10)),
                ('currency', models.CharField(default='INR', max_length=3)),
                ('payment_method', models.CharField(choices=[('razorpay', 'Razorpay'), ('upi', 'UPI'), ('card', 'Card')], default='razorpay', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], db_index=True, default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('hibernation_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='api.hibernationplan')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
                ('user_hibernation_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='api.userhibernationplan')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserLifetimeUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_uploaded_bytes', models.BigIntegerField(default=0, help_text='Total bytes uploaded')),
                ('total_downloaded_bytes', models.BigIntegerField(default=0, help_text='Total bytes downloaded')),
                ('total_deleted_bytes', models.BigIntegerField(default=0, help_text='Total bytes deleted')),
                ('peak_storage_bytes', models.BigIntegerField(default=0, help_text='Peak storage usage in bytes')),
                ('files_uploaded_count', models.IntegerField(default=0, help_text='Total files uploaded')),
                ('files_downloaded_count', models.IntegerField(default=0, help_text='Total files downloaded')),
                ('files_deleted_count', models.IntegerField(default=0, help_text='Total files deleted')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last update timestamp')),
                ('upload_delete_ratio', models.DecimalField(decimal_places=2, default=0.0, help_text='Upload/delete ratio', max_digits=5)),
                ('rapid_cycles_count', models.IntegerField(default=0, help_text='Count of rapid upload/delete cycles')),
                ('abuse_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Abuse score (0-1)', max_digits=3)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='lifetime_usage', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Lifetime Usage',
                'verbose_name_plural': 'User Lifetime Usages',
            },
        ),
        migrations.CreateModel(
            name='UserMonthlyLimits',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.DateField(db_index=True, help_text='First day of the month')),
                ('upload_limit_bytes', models.BigIntegerField(default=16106127360, help_text='Monthly upload limit in bytes (15GB)')),
                ('download_limit_bytes', models.BigIntegerField(default=53687091200, help_text='Monthly download limit in bytes (50GB)')),
                ('storage_limit_bytes', models.BigIntegerField(default=16106127360, help_text='Monthly storage limit in bytes (15GB)')),
                ('uploads_used_bytes', models.BigIntegerField(default=0, help_text='Bytes uploaded this month')),
                ('downloads_used_bytes', models.BigIntegerField(default=0, help_text='Bytes downloaded this month')),
                ('storage_peak_bytes', models.BigIntegerField(default=0, help_text='Peak storage usage this month')),
                ('current_storage_bytes', models.BigIntegerField(default=0, help_text='Current storage usage')),
                ('upload_count', models.IntegerField(default=0, help_text='Number of uploads this month')),
                ('download_count', models.IntegerField(default=0, help_text='Number of downloads this month')),
                ('delete_count', models.IntegerField(default=0, help_text='Number of deletions this month')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monthly_limits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Monthly Limits',
                'verbose_name_plural': 'User Monthly Limits',
                'ordering': ['-month'],
            },
        ),
        migrations.AddIndex(
            model_name='mediafile',
            index=models.Index(fields=['user', 'status'], name='api_mediafi_user_id_d20c3f_idx'),
        ),
        migrations.AddIndex(
            model_name='mediafile',
            index=models.Index(fields=['user', 'uploaded_at'], name='api_mediafi_user_id_f31af2_idx'),
        ),
        migrations.AddIndex(
            model_name='mediafile',
            index=models.Index(fields=['file_type', 'status'], name='api_mediafi_file_ty_731818_idx'),
        ),
        migrations.AddIndex(
            model_name='mediafile',
            index=models.Index(fields=['user', 'relative_path', 'is_deleted'], name='api_mediafi_user_id_0ac3b9_idx'),
        ),
        migrations.AddIndex(
            model_name='mediafile',
            index=models.Index(fields=['user', 'is_deleted', 'uploaded_at'], name='api_mediafi_user_id_03727a_idx'),
        ),
        migrations.AddIndex(
            model_name='archivejob',
            index=models.Index(fields=['user', 'status'], name='api_archive_user_id_620491_idx'),
        ),
        migrations.AddIndex(
            model_name='archivejob',
            index=models.Index(fields=['user', 'job_type'], name='api_archive_user_id_0d5446_idx'),
        ),
        migrations.AddIndex(
            model_name='archivejob',
            index=models.Index(fields=['status', 'started_at'], name='api_archive_status_c3447f_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', 'activity_type'], name='api_useract_user_id_937f3e_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', 'month'], name='api_useract_user_id_6db6ab_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['activity_type', 'timestamp'], name='api_useract_activit_dc27ac_idx'),
        ),
        migrations.AddIndex(
            model_name='useractivity',
            index=models.Index(fields=['user', 'activity_type', 'month'], name='api_useract_user_id_a659a5_idx'),
        ),
        migrations.AddIndex(
            model_name='usermonthlylimits',
            index=models.Index(fields=['user', 'month'], name='api_usermon_user_id_b45682_idx'),
        ),
        migrations.AddIndex(
            model_name='usermonthlylimits',
            index=models.Index(fields=['month'], name='api_usermon_month_d18db1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usermonthlylimits',
            unique_together={('user', 'month')},
        ),
    ]
